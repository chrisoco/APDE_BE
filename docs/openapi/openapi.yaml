openapi: 3.0.3
info:
  title: APDE API
  description: |
    APDE (Application for Prospect Data Exchange) API
    
    This API provides endpoints for managing campaigns, landing pages, prospects, and user authentication.
    
    ## Authentication
    The API uses Laravel Sanctum for authentication. Most endpoints require a Bearer token obtained from the login endpoint.
    
    ## Rate Limiting
    API requests are rate limited to ensure fair usage.
    
    ## Pagination
    List endpoints return paginated results with metadata about the current page and total records.
  version: 1.0.0
  contact:
    name: APDE Support
    email: support@apde.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api
    description: Development server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Campaigns
    description: Campaign management operations
  - name: Landing Pages
    description: Landing page management operations
  - name: Prospects
    description: Prospect data operations
  - name: Generic Filters
    description: Generic filtering and search operations

paths:
  /login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user and return an access token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  description: User's password
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Bearer token for API access
                    example: "1|abc123def456..."
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate the current access token
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /lp/{identifier}:
    get:
      tags:
        - Landing Pages
      summary: Get landing page by identifier
      description: Retrieve a landing page by its UUID or slug. If accessed by slug, the landing page must be associated with an active campaign.
      operationId: getLandingPageByIdentifier
      parameters:
        - name: identifier
          in: path
          required: true
          description: Landing page UUID or slug
          schema:
            type: string
          example: "my-landing-page-slug"
      responses:
        '200':
          description: Landing page found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPage'
        '404':
          description: Landing page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /prospects:
    get:
      tags:
        - Prospects
      summary: List prospects
      description: Retrieve a paginated list of prospects
      operationId: listProspects
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: per_page
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 10
      responses:
        '200':
          description: List of prospects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProspectCollection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /prospects/{id}:
    get:
      tags:
        - Prospects
      summary: Get prospect by ID
      description: Retrieve a specific prospect by its ID
      operationId: getProspect
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Prospect ID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Prospect found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prospect'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Prospect not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /campaigns:
    get:
      tags:
        - Campaigns
      summary: List campaigns
      description: Retrieve a paginated list of campaigns
      operationId: listCampaigns
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: per_page
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 10
      responses:
        '200':
          description: List of campaigns
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignCollection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Campaigns
      summary: Create campaign
      description: Create a new campaign
      operationId: createCampaign
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignCreate'
      responses:
        '201':
          description: Campaign created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /campaigns/{id}:
    get:
      tags:
        - Campaigns
      summary: Get campaign by ID
      description: Retrieve a specific campaign by its ID
      operationId: getCampaign
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Campaign ID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Campaign found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Campaign not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Campaigns
      summary: Update campaign
      description: Update an existing campaign
      operationId: updateCampaign
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Campaign ID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignUpdate'
      responses:
        '200':
          description: Campaign updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Campaign not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
    delete:
      tags:
        - Campaigns
      summary: Delete campaign
      description: Delete a campaign
      operationId: deleteCampaign
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Campaign ID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Campaign deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Campaign not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /landingpages:
    get:
      tags:
        - Landing Pages
      summary: List landing pages
      description: Retrieve a paginated list of landing pages
      operationId: listLandingPages
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: per_page
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 10
      responses:
        '200':
          description: List of landing pages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPageCollection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Landing Pages
      summary: Create landing page
      description: Create a new landing page
      operationId: createLandingPage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LandingPageCreate'
      responses:
        '201':
          description: Landing page created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /landingpages/{id}:
    get:
      tags:
        - Landing Pages
      summary: Get landing page by ID
      description: Retrieve a specific landing page by its ID
      operationId: getLandingPage
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Landing page ID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Landing page found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Landing page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Landing Pages
      summary: Update landing page
      description: Update an existing landing page
      operationId: updateLandingPage
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Landing page ID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LandingPageUpdate'
      responses:
        '200':
          description: Landing page updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Landing page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
    delete:
      tags:
        - Landing Pages
      summary: Delete landing page
      description: Delete a landing page
      operationId: deleteLandingPage
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Landing page ID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Landing page deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Landing page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{model}/filter:
    get:
      tags:
        - Generic Filters
      summary: Filter model data
      description: Apply filters to a specific model and return paginated results
      operationId: filterModel
      security:
        - bearerAuth: []
      parameters:
        - name: model
          in: path
          required: true
          description: Model name to filter
          schema:
            type: string
            enum: [prospects]
          example: "prospects"
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: per_page
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 10
        - name: source
          in: query
          description: Filter by prospect source
          schema:
            type: string
            enum: [erp, kueba]
          example: "erp"
        - name: gender
          in: query
          description: Filter by gender
          schema:
            type: string
          example: "male"
        - name: age_min
          in: query
          description: Minimum age filter
          schema:
            type: integer
            minimum: 0
          example: 18
        - name: age_max
          in: query
          description: Maximum age filter
          schema:
            type: integer
            minimum: 0
          example: 65
        - name: blood_group
          in: query
          description: Filter by blood group
          schema:
            type: string
          example: "A+"
        - name: eye_color
          in: query
          description: Filter by eye color
          schema:
            type: string
          example: "blue"
        - name: hair_color
          in: query
          description: Filter by hair color
          schema:
            type: string
          example: "brown"
        - name: address.city
          in: query
          description: Filter by city
          schema:
            type: string
          example: "Berlin"
        - name: address.state
          in: query
          description: Filter by state
          schema:
            type: string
          example: "Berlin"
        - name: address.country
          in: query
          description: Filter by country
          schema:
            type: string
          example: "Germany"
        - name: address.plz
          in: query
          description: Filter by postal code
          schema:
            type: string
          example: "10115"
        - name: address.latitude
          in: query
          description: Filter by latitude
          schema:
            type: number
            format: float
          example: 52.5200
        - name: address.longitude
          in: query
          description: Filter by longitude
          schema:
            type: number
            format: float
          example: 13.4050
      responses:
        '200':
          description: Filtered results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProspectCollection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Model not found or not filterable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{model}/search-criteria:
    get:
      tags:
        - Generic Filters
      summary: Get search criteria
      description: Get available search criteria for a specific model
      operationId: getSearchCriteria
      security:
        - bearerAuth: []
      parameters:
        - name: model
          in: path
          required: true
          description: Model name to get search criteria for
          schema:
            type: string
            enum: [prospects]
          example: "prospects"
      responses:
        '200':
          description: Search criteria retrieved successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                example:
                  source:
                    type: "enum"
                    values: ["erp", "kueba"]
                  gender:
                    type: "enum"
                    values: ["male", "female", "other"]
                  age:
                    type: "range"
                    min: 0
                    max: 120
                  blood_group:
                    type: "enum"
                    values: ["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"]
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Model not found or not filterable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cp-cookie:
    get:
      tags:
        - Campaigns
      summary: Get campaigns with CP ability
      description: Get all campaigns (requires 'view-cp' ability or global '*' ability)
      operationId: getCpCookie
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Campaigns retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Campaign'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - missing required ability
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token obtained from the login endpoint

  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: "Invalid login credentials"
      required:
        - message

    ValidationErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Validation error message
          example: "The given data was invalid."
        errors:
          type: object
          description: Field-specific validation errors
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email:
              - "The email field is required."
            password:
              - "The password field is required."
      required:
        - message
        - errors

    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
          description: Current page number
          example: 1
        from:
          type: integer
          description: First item number on current page
          example: 1
        last_page:
          type: integer
          description: Last page number
          example: 5
        per_page:
          type: integer
          description: Items per page
          example: 10
        to:
          type: integer
          description: Last item number on current page
          example: 10
        total:
          type: integer
          description: Total number of items
          example: 50

    Prospect:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          example: "507f1f77bcf86cd799439011"
        external_id:
          type: string
          description: External system identifier
          example: "EXT123456"
        first_name:
          type: string
          description: First name
          example: "John"
        last_name:
          type: string
          description: Last name
          example: "Doe"
        email:
          type: string
          format: email
          description: Email address
          example: "john.doe@example.com"
        phone:
          type: string
          nullable: true
          description: Phone number
          example: "+49123456789"
        gender:
          type: string
          nullable: true
          description: Gender
          example: "male"
        age:
          type: integer
          nullable: true
          description: Age
          example: 30
        birth_date:
          type: string
          format: date
          nullable: true
          description: Birth date
          example: "1993-05-15"
        image:
          type: string
          nullable: true
          description: Profile image URL
          example: "https://example.com/images/john.jpg"
        blood_group:
          type: string
          nullable: true
          description: Blood group
          example: "A+"
        height:
          type: number
          format: float
          nullable: true
          description: Height in cm
          example: 175.5
        weight:
          type: number
          format: float
          nullable: true
          description: Weight in kg
          example: 70.2
        eye_color:
          type: string
          nullable: true
          description: Eye color
          example: "blue"
        hair_color:
          type: string
          nullable: true
          description: Hair color
          example: "brown"
        hair_type:
          type: string
          nullable: true
          description: Hair type
          example: "straight"
        address:
          type: object
          nullable: true
          description: Address information
          properties:
            street:
              type: string
              example: "Musterstraße 123"
            city:
              type: string
              example: "Berlin"
            state:
              type: string
              example: "Berlin"
            country:
              type: string
              example: "Germany"
            plz:
              type: string
              example: "10115"
            latitude:
              type: number
              format: float
              example: 52.5200
            longitude:
              type: number
              format: float
              example: 13.4050
        source:
          type: string
          enum: [erp, kueba]
          description: Data source
          example: "erp"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-15T10:30:00Z"
      required:
        - id
        - external_id
        - first_name
        - last_name
        - email
        - source
        - created_at
        - updated_at

    ProspectCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Prospect'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        links:
          type: object
          properties:
            first:
              type: string
              example: "http://localhost:8000/api/prospects?page=1"
            last:
              type: string
              example: "http://localhost:8000/api/prospects?page=5"
            prev:
              type: string
              nullable: true
              example: null
            next:
              type: string
              nullable: true
              example: "http://localhost:8000/api/prospects?page=2"
      required:
        - data
        - meta
        - links

    Campaign:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          example: "507f1f77bcf86cd799439011"
        title:
          type: string
          description: Campaign title
          example: "Summer Sale 2023"
        description:
          type: string
          nullable: true
          description: Campaign description
          example: "Special offers for summer season"
        status:
          type: string
          enum: [draft, active, paused, completed]
          description: Campaign status
          example: "active"
        start_date:
          type: string
          format: date-time
          nullable: true
          description: Campaign start date
          example: "2023-06-01T00:00:00Z"
        end_date:
          type: string
          format: date-time
          nullable: true
          description: Campaign end date
          example: "2023-08-31T23:59:59Z"
        prospect_filter:
          type: object
          nullable: true
          description: Prospect filtering criteria
          additionalProperties: true
        landingpage:
          $ref: '#/components/schemas/LandingPage'
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-15T10:30:00Z"
      required:
        - id
        - title
        - status
        - created_at
        - updated_at

    CampaignCreate:
      type: object
      properties:
        title:
          type: string
          description: Campaign title
          example: "Summer Sale 2023"
        description:
          type: string
          nullable: true
          description: Campaign description
          example: "Special offers for summer season"
        status:
          type: string
          enum: [draft, active, paused, completed]
          description: Campaign status
          example: "active"
        start_date:
          type: string
          format: date-time
          nullable: true
          description: Campaign start date
          example: "2023-06-01T00:00:00Z"
        end_date:
          type: string
          format: date-time
          nullable: true
          description: Campaign end date
          example: "2023-08-31T23:59:59Z"
        prospect_filter:
          type: object
          nullable: true
          description: Prospect filtering criteria
          additionalProperties: true
      required:
        - title
        - status

    CampaignUpdate:
      type: object
      properties:
        title:
          type: string
          description: Campaign title
          example: "Summer Sale 2023"
        description:
          type: string
          nullable: true
          description: Campaign description
          example: "Special offers for summer season"
        status:
          type: string
          enum: [draft, active, paused, completed]
          description: Campaign status
          example: "active"
        start_date:
          type: string
          format: date-time
          nullable: true
          description: Campaign start date
          example: "2023-06-01T00:00:00Z"
        end_date:
          type: string
          format: date-time
          nullable: true
          description: Campaign end date
          example: "2023-08-31T23:59:59Z"
        prospect_filter:
          type: object
          nullable: true
          description: Prospect filtering criteria
          additionalProperties: true

    CampaignCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Campaign'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        links:
          type: object
          properties:
            first:
              type: string
              example: "http://localhost:8000/api/campaigns?page=1"
            last:
              type: string
              example: "http://localhost:8000/api/campaigns?page=3"
            prev:
              type: string
              nullable: true
              example: null
            next:
              type: string
              nullable: true
              example: "http://localhost:8000/api/campaigns?page=2"
      required:
        - data
        - meta
        - links

    LandingPage:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          example: "507f1f77bcf86cd799439011"
        campaign_id:
          type: string
          nullable: true
          description: Associated campaign ID
          example: "507f1f77bcf86cd799439012"
        title:
          type: string
          description: Landing page title
          example: "Summer Sale Landing Page"
        slug:
          type: string
          description: URL slug
          example: "summer-sale-landing-page"
        headline:
          type: string
          description: Main headline
          example: "Get 50% Off This Summer!"
        subline:
          type: string
          nullable: true
          description: Sub headline
          example: "Limited time offer - don't miss out!"
        sections:
          type: array
          description: Page sections content
          items:
            type: object
            additionalProperties: true
          example:
            - type: "hero"
              content: "Welcome to our summer sale"
            - type: "features"
              items:
                - title: "Feature 1"
                  description: "Description 1"
        form_fields:
          type: object
          nullable: true
          description: Form field configuration
          additionalProperties: true
        campaign:
          $ref: '#/components/schemas/Campaign'
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-15T10:30:00Z"
      required:
        - id
        - title
        - slug
        - headline
        - sections
        - created_at
        - updated_at

    LandingPageCreate:
      type: object
      properties:
        title:
          type: string
          description: Landing page title
          example: "Summer Sale Landing Page"
        headline:
          type: string
          description: Main headline
          example: "Get 50% Off This Summer!"
        subline:
          type: string
          nullable: true
          description: Sub headline
          example: "Limited time offer - don't miss out!"
        campaign_id:
          type: string
          nullable: true
          description: Associated campaign ID
          example: "507f1f77bcf86cd799439012"
        sections:
          type: array
          description: Page sections content
          items:
            type: object
            additionalProperties: true
          example:
            - type: "hero"
              content: "Welcome to our summer sale"
            - type: "features"
              items:
                - title: "Feature 1"
                  description: "Description 1"
        form_fields:
          type: object
          nullable: true
          description: Form field configuration
          additionalProperties: true
      required:
        - title
        - headline
        - sections

    LandingPageUpdate:
      type: object
      properties:
        title:
          type: string
          description: Landing page title
          example: "Summer Sale Landing Page"
        headline:
          type: string
          description: Main headline
          example: "Get 50% Off This Summer!"
        subline:
          type: string
          nullable: true
          description: Sub headline
          example: "Limited time offer - don't miss out!"
        campaign_id:
          type: string
          nullable: true
          description: Associated campaign ID
          example: "507f1f77bcf86cd799439012"
        sections:
          type: array
          description: Page sections content
          items:
            type: object
            additionalProperties: true
          example:
            - type: "hero"
              content: "Welcome to our summer sale"
            - type: "features"
              items:
                - title: "Feature 1"
                  description: "Description 1"
        form_fields:
          type: object
          nullable: true
          description: Form field configuration
          additionalProperties: true

    LandingPageCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LandingPage'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        links:
          type: object
          properties:
            first:
              type: string
              example: "http://localhost:8000/api/landingpages?page=1"
            last:
              type: string
              example: "http://localhost:8000/api/landingpages?page=2"
            prev:
              type: string
              nullable: true
              example: null
            next:
              type: string
              nullable: true
              example: "http://localhost:8000/api/landingpages?page=2"
      required:
        - data
        - meta
        - links 