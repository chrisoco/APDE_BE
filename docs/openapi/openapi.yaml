openapi: 3.1.0
info:
  title: APDE API
  description: |
    APDE Hotel Grand Pilatus API
    
    This API provides endpoints for managing campaigns, landing pages, prospects, and user authentication.
    
    ## Authentication
    The API supports both Bearer Token (Laravel Sanctum) and Cookie-based authentication. Endpoints may require a Bearer token or a valid session cookie, as described per endpoint below.
    
    ## Pagination
    List endpoints return paginated results with metadata about the current page and total records.
  version: 1.0.0
  contact:
    name: APDE Hotel Grand Pilatus Support
    email: support@apde.com

servers:
  - url: http://localhost:8000/api
    description: Development server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Campaigns
    description: Campaign management operations
  - name: Landing Pages
    description: Landing page management operations
  - name: Prospects
    description: Prospect data operations
  - name: Generic Filters
    description: Generic filtering and search operations

paths:
  /login:
    post:
      tags:
        - Authentication
      summary: User login (Token or Cookie based)
      description: |
        Authenticate a user and return an access token (for API clients) or set a session cookie (for browser clients).
        
        - **Token-based:** POST `/api/login` with email and password returns a Bearer token.
        - **Cookie-based:** POST `/login` with email, password, and valid CSRF token sets a session cookie.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john@doe.com"
                password:
                  type: string
                  format: password
                  description: User's password
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Bearer token for API access (token-based login)
                    example: "687bb3a68c6a6f3e8c058ac3|Ir26AFaFW0FPVxP8CLuSDINi9U5AmCVmBVhjTYjjebbba333"
                  message:
                    type: string
                    description: Success message (cookie-based login)
                    example: "Logged in successfully"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid login credentials"
        '419':
          description: CSRF token mismatch (cookie-based login)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "CSRF token mismatch."
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /logout:
    post:
      tags:
        - Authentication
      summary: User logout (Token or Cookie based)
      description: |
        Invalidate the current access token (token-based) or session cookie (cookie-based).
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthenticated."

  /sanctum/csrf-cookie:
    get:
      tags:
        - Authentication
      summary: Generate CSRF cookie (for browser login)
      description: |
        Generates a CSRF cookie required for cookie-based authentication. Call this endpoint before attempting a cookie-based login.
      operationId: generateCsrfCookie
      responses:
        '204':
          description: CSRF cookie set (no content)
        '200':
          description: CSRF cookie set (legacy clients)

  /lp/{identifier}:
    get:
      tags:
        - Landing Pages
      summary: Get landing page by identifier
      description: Retrieve a landing page by its UUID or slug. If accessed by slug, the landing page must be associated with an active campaign.
      operationId: getLandingPageByIdentifier
      parameters:
        - name: identifier
          in: path
          required: true
          description: Landing page UUID or slug
          schema:
            type: string
          example: "my-landing-page-slug"
      responses:
        '200':
          description: Landing page found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPage'
        '404':
          description: Landing page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /prospects:
    get:
      tags:
        - Prospects
      summary: List prospects
      description: Retrieve a paginated list of prospects
      operationId: listProspects
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: per_page
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 10
      responses:
        '200':
          description: List of prospects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProspectCollection'
              examples:
                example:
                  value:
                    data:
                      - id: "687b96159895ea533e000ef0"
                        gender: "male"
                        age: 33
                        birthDate: "1991-02-12T00:00:00.000000Z"
                        image: "https://dummyjson.com/icon/ethanm/128"
                        bloodGroup: "AB+"
                        height: 159.19
                        weight: 68.81
                        eyeColor: "Hazel"
                        hairColor: "Purple"
                        hairType: "Curly"
                        address:
                          address: "466 Pine Street"
                          city: "San Antonio"
                          state: "Louisiana"
                          plz: "72360"
                          country: "United States"
                          latitude: 74.074918
                          longitude: -25.312703
                      - id: "687b96159895ea533e000ef1"
                        gender: "female"
                        age: 31
                        birthDate: "1993-06-10T00:00:00.000000Z"
                        image: "https://dummyjson.com/icon/isabellad/128"
                        bloodGroup: "A-"
                        height: 150.56
                        weight: 50.1
                        eyeColor: "Brown"
                        hairColor: "Blonde"
                        hairType: "Curly"
                        address:
                          address: "1964 Oak Street"
                          city: "New York"
                          state: "Utah"
                          plz: "89352"
                          country: "United States"
                          latitude: 41.331324
                          longitude: 151.782727
                    links:
                      first: "http://apde_be.test/api/prospects?page=1"
                      last: "http://apde_be.test/api/prospects?page=154"
                      prev: "http://apde_be.test/api/prospects?page=4"
                      next: "http://apde_be.test/api/prospects?page=6"
                    meta:
                      current_page: 5
                      from: 9
                      last_page: 154
                      per_page: 2
                      to: 10
                      total: 308
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthenticated."
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Forbidden."

  /prospects/{id}:
    get:
      tags:
        - Prospects
      summary: Get prospect by ID
      description: Retrieve a specific prospect by its ID
      operationId: getProspect
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Prospect ID
          schema:
            type: string
          example: "687b96159895ea533e000ef0"
      responses:
        '200':
          description: Prospect found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prospect'
              examples:
                example:
                  value:
                    data:
                      id: "687b96159895ea533e000ef0"
                      firstName: "Ethan"
                      lastName: "Martinez"
                      email: "ethan.martinez@x.dummyjson.com"
                      phone: "+92 933-608-5081"
                      gender: "male"
                      age: 33
                      birthDate: "1991-02-12T00:00:00.000000Z"
                      image: "https://dummyjson.com/icon/ethanm/128"
                      bloodGroup: "AB+"
                      height: 159.19
                      weight: 68.81
                      eyeColor: "Hazel"
                      hairColor: "Purple"
                      hairType: "Curly"
                      address:
                        address: "466 Pine Street"
                        city: "San Antonio"
                        state: "Louisiana"
                        plz: "72360"
                        country: "United States"
                        latitude: 74.074918
                        longitude: -25.312703
                      source: "ERP"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthenticated."
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Forbidden."
        '404':
          description: Prospect not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Not found."

  /prospects/filter:
    get:
      tags:
        - Prospects
      summary: Filter prospects
      description: Filter prospects using query parameters (see below for supported filters)
      operationId: filterProspects
      security:
        - bearerAuth: []
      parameters:
        - name: source
          in: query
          description: Filter by prospect source (erp, kueba)
          schema:
            type: string
            enum: [erp, kueba]
          example: "erp"
        - name: gender
          in: query
          description: Filter by gender (male, female)
          schema:
            type: string
            enum: [male, female]
          example: "female"
        - name: min_age
          in: query
          description: Minimum age filter
          schema:
            type: integer
            minimum: 0
          example: 38
        - name: max_age
          in: query
          description: Maximum age filter
          schema:
            type: integer
            minimum: 0
          example: 70
        - name: per_page
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 2
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 5
        - name: blood_group_in[]
          in: query
          description: Filter by multiple blood groups
          schema:
            type: array
            items:
              type: string
              enum: [A+, A-, B+, B-, AB+, AB-, O+, O-]
          example: ["AB-", "O-"]
      responses:
        '200':
          description: Filtered prospects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProspectCollection'
              examples:
                example:
                  value:
                    data:
                      - id: "687b96159895ea533e000ef7"
                        gender: "female"
                        age: 25
                        birthDate: "1999-03-10T00:00:00.000000Z"
                        image: "https://dummyjson.com/icon/averyp/128"
                        bloodGroup: "O-"
                        height: 172.68
                        weight: 93.9
                        eyeColor: "Brown"
                        hairColor: "Green"
                        hairType: "Curly"
                        address:
                          address: "1125 First Street"
                          city: "Columbus"
                          state: "Iowa"
                          plz: "30973"
                          country: "United States"
                          latitude: 12.789127
                          longitude: 85.792598
                      - id: "687b96159895ea533e000efb"
                        gender: "male"
                        age: 34
                        birthDate: "1990-11-30T00:00:00.000000Z"
                        image: "https://dummyjson.com/icon/jacksone/128"
                        bloodGroup: "O-"
                        height: 162.57
                        weight: 74.37
                        eyeColor: "Green"
                        hairColor: "Red"
                        hairType: "Straight"
                        address:
                          address: "1873 Main Street"
                          city: "New York"
                          state: "Arkansas"
                          plz: "26600"
                          country: "United States"
                          latitude: 34.722451
                          longitude: 63.448927
                    links:
                      first: "http://apde_be.test/api/prospects/filter?page=1"
                      last: "http://apde_be.test/api/prospects/filter?page=30"
                      prev: "http://apde_be.test/api/prospects/filter?page=4"
                      next: "http://apde_be.test/api/prospects/filter?page=6"
                    meta:
                      current_page: 5
                      from: 9
                      last_page: 30
                      per_page: 2
                      to: 10
                      total: 60
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthenticated."
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Forbidden."
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Not found."

  /prospects/search-criteria:
    get:
      tags:
        - Prospects
      summary: Get search criteria for prospects
      description: Get available search criteria for filtering prospects
      operationId: getProspectSearchCriteria
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Search criteria retrieved successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                example:
                  source:
                    type: "enum"
                    values: ["erp", "kueba"]
                  gender:
                    type: "enum"
                    values: ["female", "male"]
                  age:
                    type: "range"
                    min: 22
                    max: 80
                  birth_date:
                    type: "range"
                    min: "1945-05-20T00:00:00.000000Z"
                    max: "2002-04-20T00:00:00.000000Z"
                  blood_group:
                    type: "enum"
                    values: ["O-", "B+", "AB+", "AB-", "A-", "B-", "A+", "O+"]
                  height:
                    type: "range"
                    min: 150.25
                    max: 199.81
                  weight:
                    type: "range"
                    min: 50.1
                    max: 99.54
                  eye_color:
                    type: "enum"
                    values: ["Green", "Red", "Hazel", "Amber", "Blue", "Brown", "Violet", "Gray"]
                  hair_color:
                    type: "enum"
                    values: ["Brown", "Green", "White", "Blonde", "Gray", "Red", "Purple", "Blue", "Black"]
                  address.city:
                    type: "enum"
                    values: ["Phoenix", "Houston", "Washington", "Seattle", "Jacksonville", "Fort Worth", "Indianapolis", "San Antonio", "New York", "Denver", "Columbus", "San Jose", "San Diego", "Chicago", "Philadelphia", "Dallas", "Los Angeles", "San Francisco", "Charlotte", "Austin", "Obersteckholz", "Soral", "Conthey", "Gündlischwand", "Coeuve", "Arnex-sur-Orbe", "Le Grand-Saconnex", "Mathod", "Cheiry", "Gilly", "Tannay", "Burgistein", "Muralto", "Wilderswil", "Leytron", "Kaiserstuhl", "Vendlincourt", "Vitznau", "Rolle", "Biglen", "Hindelbank", "Ossingen", "Saint-Saphorin (Lavaux)", "Morrens (Vd)", "Rüeggisberg", "Tartegnin", "Andermatt", "Paudex", "Bettenhausen", "Schwende", "Derendingen", "Rances", "Meilen", "Walperswil", "Soyhières", "Belfaux", "Torny", "Unterägeri", "Oberhünigen", "Muotathal", "Riedholz", "Étoy", "Deisswil bei Münchenbuchsee", "Eichberg", "Münchenbuchsee", "Coinsins", "Granges (Veveyse)", "Liestal", "Zizers", "Roggwil (Tg)", "Châtillon (Ju)", "Moudon", "Gruyères", "Turgi", "Homberg", "Ursenbach", "Cham", "Écublens (Vd)", "Veltheim (Ag)", "Ruswil", "Waltensburg/Vuorz", "Thônex", "Waltenschwil", "Chavannes-de-Bogis", "Erlen", "Cortébert", "Turbenthal", "Grüningen", "Walliswil bei Niederbipp", "Ellikon an der Thur", "Däniken", "Rorschach"]
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthenticated."
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Forbidden."
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Not found."

  /campaigns:
    get:
      tags:
        - Campaigns
      summary: List campaigns
      description: Retrieve a paginated list of campaigns
      operationId: listCampaigns
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: per_page
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 10
      responses:
        '200':
          description: List of campaigns
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignCollection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Campaigns
      summary: Create campaign
      description: Create a new campaign
      operationId: createCampaign
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignCreate'
      responses:
        '201':
          description: Campaign created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /campaigns/{id}:
    get:
      tags:
        - Campaigns
      summary: Get campaign by ID
      description: Retrieve a specific campaign by its ID
      operationId: getCampaign
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Campaign ID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Campaign found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Campaign not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Campaigns
      summary: Update campaign
      description: Update an existing campaign
      operationId: updateCampaign
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Campaign ID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignUpdate'
      responses:
        '200':
          description: Campaign updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Campaign not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
    delete:
      tags:
        - Campaigns
      summary: Delete campaign
      description: Delete a campaign
      operationId: deleteCampaign
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Campaign ID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Campaign deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Campaign not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /campaigns/{campaign}/send-emails:
    post:
      tags:
        - Campaigns
      summary: Send campaign emails
      description: |
        Send personalized emails to prospects matching the campaign's filter criteria.
        
        ## Requirements
        - Campaign must have an associated landing page
        - Campaign must have prospect filters defined
        - User must have ADMIN or SUPER_ADMIN role
        
        ## Local Development
        In local development environment, only 1 email is sent instead of sending to all matching prospects.
        
        ## Example Response
        ```json
        {
          "message": "Campaign emails queued successfully. 5 emails sent to prospects.",
          "emails_sent": 5,
          "total_prospects": 10
        }
        ```
      operationId: sendCampaignEmails
      security:
        - bearerAuth: []
      parameters:
        - name: campaign
          in: path
          required: true
          description: Campaign ID or UUID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Campaign emails sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                    example: "Campaign emails queued successfully. 5 emails sent to prospects."
                  emails_sent:
                    type: integer
                    description: Number of emails sent
                    example: 5
                  total_prospects:
                    type: integer
                    description: Total number of prospects matching filters
                    example: 10
                required:
                  - message
                  - emails_sent
                  - total_prospects
        '400':
          description: Campaign requirements not met
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: "Campaign must have an associated landing page to send emails."
                required:
                  - message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - missing required permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Campaign not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /campaigns/{campaign}/analytics:
    get:
      tags:
        - Campaigns
      summary: Get campaign analytics
      description: |
        Returns analytics data for a specific campaign. This endpoint provides aggregated statistics and insights about the campaign's performance, such as visits, conversions, and other tracked metrics.
        
        Requires authentication. User must have permission to view analytics for the specified campaign (policy: `viewAnalytics`).
      operationId: getCampaignAnalytics
      security:
        - bearerAuth: []
      parameters:
        - name: campaign
          in: path
          required: true
          description: The campaign's unique identifier (UUID)
          schema:
            type: string
          example: "686a3affca7748f6b807cbee"
      responses:
        '200':
          description: Analytics data for the campaign
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignAnalyticsResponse'
        '403':
          description: Forbidden - user is not authorized to view analytics for the campaign
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Campaign not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /landingpages:
    get:
      tags:
        - Landing Pages
      summary: List landing pages
      description: Retrieve a paginated list of landing pages
      operationId: listLandingPages
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: per_page
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 10
      responses:
        '200':
          description: List of landing pages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPageCollection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Landing Pages
      summary: Create landing page
      description: Create a new landing page
      operationId: createLandingPage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LandingPageCreate'
      responses:
        '201':
          description: Landing page created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /landingpages/{id}:
    get:
      tags:
        - Landing Pages
      summary: Get landing page by ID
      description: Retrieve a specific landing page by its ID
      operationId: getLandingPage
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Landing page ID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Landing page found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Landing page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Landing Pages
      summary: Update landing page
      description: Update an existing landing page
      operationId: updateLandingPage
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Landing page ID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LandingPageUpdate'
      responses:
        '200':
          description: Landing page updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Landing page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
    delete:
      tags:
        - Landing Pages
      summary: Delete landing page
      description: Delete a landing page
      operationId: deleteLandingPage
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Landing page ID
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Landing page deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Landing page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{model}/filter:
    get:
      tags:
        - Generic Filters
      summary: Filter model data
      description: |
        Apply filters to a specific model and return paginated results.
        
        ## Filter Examples
        
        ### Exact Value Filters
        ```
        GET /api/prospects/filter?source=erp&gender=female
        GET /api/prospects/filter?age=40
        GET /api/prospects/filter?blood_group=A+
        GET /api/prospects/filter?address.city=Zurich
        ```
        
        ### Range Filters (min_* and max_*)
        ```
        GET /api/prospects/filter?min_age=38&max_age=70
        GET /api/prospects/filter?min_height=160&max_height=180
        GET /api/prospects/filter?min_address.latitude=50.0&max_address.latitude=60.0
        ```
        
        ### Array Filters (*_in and *_not_in)
        ```
        GET /api/prospects/filter?blood_group_in[]=AB-&blood_group_in[]=O-
        GET /api/prospects/filter?gender_in[]=male&gender_in[]=female
        GET /api/prospects/filter?source_not_in[]=kueba
        GET /api/prospects/filter?address.city_in[]=Berlin&address.city_in[]=Munich
        ```
        
        ### Complex Filters (Combining Multiple Types)
        ```
        GET /api/prospects/filter?source=erp&gender=female&min_age=25&max_age=50&address.city=Berlin
        GET /api/prospects/filter?gender_in[]=male&gender_in[]=female&min_age=30&source=erp
        ```
      operationId: filterModel
      security:
        - bearerAuth: []
      parameters:
        - name: model
          in: path
          required: true
          description: Model name to filter
          schema:
            type: string
            enum: [prospects]
          example: "prospects"
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: per_page
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 10
        # Exact value filters
        - name: source
          in: query
          description: Filter by prospect source (erp, kueba)
          schema:
            type: string
            enum: [erp, kueba]
          example: "erp"
        - name: gender
          in: query
          description: Filter by gender (male, female)
          schema:
            type: string
            enum: [male, female]
          example: "male"
        - name: age
          in: query
          description: Exact age filter
          schema:
            type: integer
            minimum: 0
          example: 40
        - name: blood_group
          in: query
          description: Filter by blood group
          schema:
            type: string
            enum: [A+, A-, B+, B-, AB+, AB-, O+, O-]
          example: "A+"
        - name: eye_color
          in: query
          description: Filter by eye color
          schema:
            type: string
          example: "blue"
        - name: hair_color
          in: query
          description: Filter by hair color
          schema:
            type: string
          example: "brown"
        - name: address.city
          in: query
          description: Filter by city
          schema:
            type: string
          example: "Zurich"
        - name: address.state
          in: query
          description: Filter by state
          schema:
            type: string
          example: "Berlin"
        - name: address.country
          in: query
          description: Filter by country
          schema:
            type: string
          example: "Germany"
        - name: address.plz
          in: query
          description: Filter by postal code
          schema:
            type: string
          example: "10115"
        - name: address.latitude
          in: query
          description: Filter by latitude
          schema:
            type: number
            format: float
          example: 52.5200
        - name: address.longitude
          in: query
          description: Filter by longitude
          schema:
            type: number
            format: float
          example: 13.4050
        
        # Range filters (min_* and max_*)
        - name: min_age
          in: query
          description: Minimum age filter
          schema:
            type: integer
            minimum: 0
          example: 38
        - name: max_age
          in: query
          description: Maximum age filter
          schema:
            type: integer
            minimum: 0
          example: 70
        - name: min_height
          in: query
          description: Minimum height filter
          schema:
            type: number
            format: float
          example: 160.0
        - name: max_height
          in: query
          description: Maximum height filter
          schema:
            type: number
            format: float
          example: 180.0
        - name: min_weight
          in: query
          description: Minimum weight filter
          schema:
            type: number
            format: float
          example: 60.0
        - name: max_weight
          in: query
          description: Maximum weight filter
          schema:
            type: number
            format: float
          example: 80.0
        - name: min_address.latitude
          in: query
          description: Minimum latitude filter
          schema:
            type: number
            format: float
          example: 50.0
        - name: max_address.latitude
          in: query
          description: Maximum latitude filter
          schema:
            type: number
            format: float
          example: 60.0
        - name: min_address.longitude
          in: query
          description: Minimum longitude filter
          schema:
            type: number
            format: float
          example: 10.0
        - name: max_address.longitude
          in: query
          description: Maximum longitude filter
          schema:
            type: number
            format: float
          example: 20.0
        
        # Array filters (*_in and *_not_in)
        - name: source_in[]
          in: query
          description: Filter by multiple sources
          schema:
            type: array
            items:
              type: string
              enum: [erp, kueba]
          example: ["erp", "kueba"]
        - name: source_not_in[]
          in: query
          description: Exclude multiple sources
          schema:
            type: array
            items:
              type: string
              enum: [erp, kueba]
          example: ["kueba"]
        - name: gender_in[]
          in: query
          description: Filter by multiple genders
          schema:
            type: array
            items:
              type: string
              enum: [male, female]
          example: ["male", "female"]
        - name: gender_not_in[]
          in: query
          description: Exclude multiple genders
          schema:
            type: array
            items:
              type: string
              enum: [male, female]
          example: ["female"]
        - name: blood_group_in[]
          in: query
          description: Filter by multiple blood groups
          schema:
            type: array
            items:
              type: string
              enum: [A+, A-, B+, B-, AB+, AB-, O+, O-]
          example: ["AB-", "O-"]
        - name: blood_group_not_in[]
          in: query
          description: Exclude multiple blood groups
          schema:
            type: array
            items:
              type: string
              enum: [A+, A-, B+, B-, AB+, AB-, O+, O+, O-]
          example: ["AB-"]
        - name: eye_color_in[]
          in: query
          description: Filter by multiple eye colors
          schema:
            type: array
            items:
              type: string
          example: ["blue", "green"]
        - name: hair_color_in[]
          in: query
          description: Filter by multiple hair colors
          schema:
            type: array
            items:
              type: string
          example: ["brown", "black"]
        - name: address.city_in[]
          in: query
          description: Filter by multiple cities
          schema:
            type: array
            items:
              type: string
          example: ["Berlin", "Munich"]
        - name: address.country_in[]
          in: query
          description: Filter by multiple countries
          schema:
            type: array
            items:
              type: string
          example: ["Germany", "Switzerland"]
      responses:
        '200':
          description: Filtered results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProspectCollection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Model not found or not filterable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{model}/search-criteria:
    get:
      tags:
        - Generic Filters
      summary: Get search criteria
      description: Get available search criteria for a specific model
      operationId: getSearchCriteria
      security:
        - bearerAuth: []
      parameters:
        - name: model
          in: path
          required: true
          description: Model name to get search criteria for
          schema:
            type: string
            enum: [prospects]
          example: "prospects"
      responses:
        '200':
          description: Search criteria retrieved successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                example:
                  source:
                    type: "enum"
                    values: ["erp", "kueba"]
                  gender:
                    type: "enum"
                    values: ["male", "female", "other"]
                  age:
                    type: "range"
                    min: 0
                    max: 120
                  blood_group:
                    type: "enum"
                    values: ["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"]
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Model not found or not filterable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token obtained from the login endpoint

  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: "Invalid login credentials"
      required:
        - message

    ValidationErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Validation error message
          example: "The given data was invalid."
        errors:
          type: object
          description: Field-specific validation errors
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email:
              - "The email field is required."
            password:
              - "The password field is required."
      required:
        - message
        - errors

    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
          description: Current page number
          example: 1
        from:
          type: integer
          description: First item number on current page
          example: 1
        last_page:
          type: integer
          description: Last page number
          example: 5
        per_page:
          type: integer
          description: Items per page
          example: 10
        to:
          type: integer
          description: Last item number on current page
          example: 10
        total:
          type: integer
          description: Total number of items
          example: 50

    Prospect:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          example: "507f1f77bcf86cd799439011"
        external_id:
          type: string
          description: External system identifier
          example: "EXT123456"
        first_name:
          type: string
          description: First name
          example: "John"
        last_name:
          type: string
          description: Last name
          example: "Doe"
        email:
          type: string
          format: email
          description: Email address
          example: "john.doe@example.com"
        phone:
          type: string
          nullable: true
          description: Phone number
          example: "+49123456789"
        gender:
          type: string
          nullable: true
          description: Gender
          example: "male"
        age:
          type: integer
          nullable: true
          description: Age
          example: 30
        birth_date:
          type: string
          format: date
          nullable: true
          description: Birth date
          example: "1993-05-15"
        image:
          type: string
          nullable: true
          description: Profile image URL
          example: "https://example.com/images/john.jpg"
        blood_group:
          type: string
          nullable: true
          description: Blood group
          example: "A+"
        height:
          type: number
          format: float
          nullable: true
          description: Height in cm
          example: 175.5
        weight:
          type: number
          format: float
          nullable: true
          description: Weight in kg
          example: 70.2
        eye_color:
          type: string
          nullable: true
          description: Eye color
          example: "blue"
        hair_color:
          type: string
          nullable: true
          description: Hair color
          example: "brown"
        hair_type:
          type: string
          nullable: true
          description: Hair type
          example: "straight"
        address:
          type: object
          nullable: true
          description: Address information
          properties:
            street:
              type: string
              example: "Musterstraße 123"
            city:
              type: string
              example: "Berlin"
            state:
              type: string
              example: "Berlin"
            country:
              type: string
              example: "Germany"
            plz:
              type: string
              example: "10115"
            latitude:
              type: number
              format: float
              example: 52.5200
            longitude:
              type: number
              format: float
              example: 13.4050
        source:
          type: string
          enum: [erp, kueba]
          description: Data source
          example: "erp"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-15T10:30:00Z"
      required:
        - id
        - external_id
        - first_name
        - last_name
        - email
        - source
        - created_at
        - updated_at

    ProspectCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Prospect'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        links:
          type: object
          properties:
            first:
              type: string
              example: "http://localhost:8000/api/prospects?page=1"
            last:
              type: string
              example: "http://localhost:8000/api/prospects?page=5"
            prev:
              type: string
              nullable: true
              example: null
            next:
              type: string
              nullable: true
              example: "http://localhost:8000/api/prospects?page=2"
      required:
        - data
        - meta
        - links

    Campaign:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          example: "507f1f77bcf86cd799439011"
        title:
          type: string
          description: Campaign title
          example: "Summer Sale 2023"
        description:
          type: string
          nullable: true
          description: Campaign description
          example: "Special offers for summer season"
        status:
          type: string
          enum: [draft, active, paused, completed]
          description: Campaign status
          example: "active"
        start_date:
          type: string
          format: date-time
          nullable: true
          description: Campaign start date
          example: "2023-06-01T00:00:00Z"
        end_date:
          type: string
          format: date-time
          nullable: true
          description: Campaign end date
          example: "2023-08-31T23:59:59Z"
        prospect_filter:
          type: object
          nullable: true
          description: Prospect filtering criteria
          additionalProperties: true
        landingpage:
          $ref: '#/components/schemas/LandingPage'
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-15T10:30:00Z"
      required:
        - id
        - title
        - status
        - created_at
        - updated_at

    CampaignCreate:
      type: object
      properties:
        title:
          type: string
          description: Campaign title
          example: "Summer Sale 2023"
        description:
          type: string
          nullable: true
          description: Campaign description
          example: "Special offers for summer season"
        status:
          type: string
          enum: [draft, active, paused, completed]
          description: Campaign status
          example: "active"
        start_date:
          type: string
          format: date-time
          nullable: true
          description: Campaign start date
          example: "2023-06-01T00:00:00Z"
        end_date:
          type: string
          format: date-time
          nullable: true
          description: Campaign end date
          example: "2023-08-31T23:59:59Z"
        prospect_filter:
          type: object
          nullable: true
          description: Prospect filtering criteria
          additionalProperties: true
      required:
        - title
        - status

    CampaignUpdate:
      type: object
      properties:
        title:
          type: string
          description: Campaign title
          example: "Summer Sale 2023"
        description:
          type: string
          nullable: true
          description: Campaign description
          example: "Special offers for summer season"
        status:
          type: string
          enum: [draft, active, paused, completed]
          description: Campaign status
          example: "active"
        start_date:
          type: string
          format: date-time
          nullable: true
          description: Campaign start date
          example: "2023-06-01T00:00:00Z"
        end_date:
          type: string
          format: date-time
          nullable: true
          description: Campaign end date
          example: "2023-08-31T23:59:59Z"
        prospect_filter:
          type: object
          nullable: true
          description: Prospect filtering criteria
          additionalProperties: true

    CampaignCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Campaign'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        links:
          type: object
          properties:
            first:
              type: string
              example: "http://localhost:8000/api/campaigns?page=1"
            last:
              type: string
              example: "http://localhost:8000/api/campaigns?page=3"
            prev:
              type: string
              nullable: true
              example: null
            next:
              type: string
              nullable: true
              example: "http://localhost:8000/api/campaigns?page=2"
      required:
        - data
        - meta
        - links

    LandingPage:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          example: "507f1f77bcf86cd799439011"
        campaign_id:
          type: string
          nullable: true
          description: Associated campaign ID
          example: "507f1f77bcf86cd799439012"
        title:
          type: string
          description: Landing page title
          example: "Summer Sale Landing Page"
        slug:
          type: string
          description: URL slug
          example: "summer-sale-landing-page"
        headline:
          type: string
          description: Main headline
          example: "Get 50% Off This Summer!"
        subline:
          type: string
          nullable: true
          description: Sub headline
          example: "Limited time offer - don't miss out!"
        sections:
          type: array
          description: Page sections content
          items:
            type: object
            additionalProperties: true
          example:
            - type: "hero"
              content: "Welcome to our summer sale"
            - type: "features"
              items:
                - title: "Feature 1"
                  description: "Description 1"
        form_fields:
          type: object
          nullable: true
          description: Form field configuration
          additionalProperties: true
        campaign:
          $ref: '#/components/schemas/Campaign'
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-15T10:30:00Z"
      required:
        - id
        - title
        - slug
        - headline
        - sections
        - created_at
        - updated_at

    LandingPageCreate:
      type: object
      properties:
        title:
          type: string
          description: Landing page title
          example: "Summer Sale Landing Page"
        headline:
          type: string
          description: Main headline
          example: "Get 50% Off This Summer!"
        subline:
          type: string
          nullable: true
          description: Sub headline
          example: "Limited time offer - don't miss out!"
        campaign_id:
          type: string
          nullable: true
          description: Associated campaign ID
          example: "507f1f77bcf86cd799439012"
        sections:
          type: array
          description: Page sections content
          items:
            type: object
            additionalProperties: true
          example:
            - type: "hero"
              content: "Welcome to our summer sale"
            - type: "features"
              items:
                - title: "Feature 1"
                  description: "Description 1"
        form_fields:
          type: object
          nullable: true
          description: Form field configuration
          additionalProperties: true
      required:
        - title
        - headline
        - sections

    LandingPageUpdate:
      type: object
      properties:
        title:
          type: string
          description: Landing page title
          example: "Summer Sale Landing Page"
        headline:
          type: string
          description: Main headline
          example: "Get 50% Off This Summer!"
        subline:
          type: string
          nullable: true
          description: Sub headline
          example: "Limited time offer - don't miss out!"
        campaign_id:
          type: string
          nullable: true
          description: Associated campaign ID
          example: "507f1f77bcf86cd799439012"
        sections:
          type: array
          description: Page sections content
          items:
            type: object
            additionalProperties: true
          example:
            - type: "hero"
              content: "Welcome to our summer sale"
            - type: "features"
              items:
                - title: "Feature 1"
                  description: "Description 1"
        form_fields:
          type: object
          nullable: true
          description: Form field configuration
          additionalProperties: true

    LandingPageCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LandingPage'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        links:
          type: object
          properties:
            first:
              type: string
              example: "http://localhost:8000/api/landingpages?page=1"
            last:
              type: string
              example: "http://localhost:8000/api/landingpages?page=2"
            prev:
              type: string
              nullable: true
              example: null
            next:
              type: string
              nullable: true
              example: "http://localhost:8000/api/landingpages?page=2"
      required:
        - data
        - meta
        - links 

    CampaignAnalyticsResponse:
      type: object
      properties:
        campaign_overview:
          type: object
          properties:
            campaign_id:
              type: string
              example: "686a3affca7748f6b807cbee"
            campaign_title:
              type: string
              example: "Ut reiciendis consequatur dolore."
            status:
              type: string
              example: "completed"
            start_date:
              type: string
              format: date-time
              example: "2025-08-04T13:02:20.000000Z"
            end_date:
              type: string
              format: date-time
              example: "2025-08-18T00:20:20.000000Z"
        visits:
          type: object
          properties:
            total:
              type: integer
              example: 10
            unique_ip:
              type: integer
              example: 10
            total_unique:
              type: integer
              example: 10
        statistics:
          type: object
          properties:
            emails_sent:
              type: integer
              example: 11
            unique_prospect_visits:
              type: integer
              example: 4
            email_cta_click_rate:
              type: number
              format: float
              example: 36.36
        device_browser_breakdown:
          type: object
          properties:
            device_types:
              type: object
              properties:
                desktop:
                  type: integer
                  example: 5
                tablet:
                  type: integer
                  example: 2
                mobile:
                  type: integer
                  example: 3
            browsers:
              type: object
              properties:
                Edge:
                  type: integer
                  example: 2
                Safari:
                  type: integer
                  example: 2
                Chrome:
                  type: integer
                  example: 4
                Firefox:
                  type: integer
                  example: 2
            operating_systems:
              type: object
              properties:
                Windows:
                  type: integer
                  example: 1
                Android:
                  type: integer
                  example: 3
                macOS:
                  type: integer
                  example: 2
                Linux:
                  type: integer
                  example: 1
                iOS:
                  type: integer
                  example: 3
            languages:
              type: object
              additionalProperties:
                type: integer
              example:
                it: 3
                en: 1
                fr: 2
                de: 4
        utm_sources:
          type: object
          properties:
            source:
              type: object
              additionalProperties:
                type: integer
              example:
                facebook: 2
                google: 1
                direct: 3
                linkedin: 3
                twitter: 1
            medium:
              type: object
              additionalProperties:
                type: integer
              example:
                email: 2
                affiliate: 4
                banner: 3
                organic: 1
      required:
        - campaign_overview
        - visits
        - statistics
        - device_browser_breakdown
        - utm_sources 